import Head from 'next/head'
import styles from './layout.module.scss'
import CloseIcon from '../../../public/images/svg/close.svg'
import { toggle, useAppDispatch, selectedValue, useAppSelector } from 'store/reducers/toggleModalReducer'
import { Formik, Form, useField } from 'formik';

interface MyFormValues {
  title: string,
  body: string
}

function Layout ({
    children,
    pageTitle,
  }: {
    children: React.ReactNode,
    pageTitle: string
  }) {
    const dispatch = useAppDispatch()

    const openNewItemModal = (state: boolean) => {
      dispatch(toggle(state))
    }

    const initialValues: MyFormValues = { title: '', body: '' };

	  const showModal = useAppSelector(selectedValue) as boolean

    const ModalTextInput = ({ label, name, placeholder, className } : { label: string, name: string, placeholder: string, className: string }) => {
      const [field, meta] = useField(name);
      return (
        <div className={`w-full ${className}`}>
          <label className="text-xs w-full block mb-2.5 mt-2" htmlFor={name}>{label}</label>
          <input className={`w-full rounded-sm pr-2 py-1 ${styles.input}`} type="text" placeholder={placeholder} {...field}/>
        </div>
      );
    };

    const ModalTextArea = ({ label, name, placeholder, rows, className } : { label: string, name: string, placeholder: string, rows: string, className: string }) => {
      const [field, meta] = useField(name);
      return (
          <div className={`w-full ${className}`}>
            <label className="text-xs w-full block mb-2.5 mt-3.5" htmlFor={name}>{label}</label>
            <textarea className={`w-full rounded-sm pr-2 py-1 ${styles.input}`} placeholder={placeholder} rows={Number(rows)} {...field} id={name} />
          </div>
      );
    };

    return (
    <>
        <Head>
            <title>next</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <div>
            <header className="header">
                <div className="container">
                  <div className="flex w-full h-16">
                    <div className="flex-1 align-middle">
                     <h3 className={`font-extrabold text-2xl isGray ${styles.lineHeight68}`}>{pageTitle}</h3>
                    </div>
                    <button 
                      className={`h-8 radius-2.5 text-xs font-normal rounded-l rounded-r mt-4 ml-4 px-4 ${styles.bgGreen}`} 
                      onClick={() => openNewItemModal(true)}>
                        سوال جدید
                      </button>
                    <div className="isGray font-normal mt-6 text-sm pl-4">طاهره غلامی</div>
                  </div>
                </div>
            </header>
            <main className={`pt-4 ${styles.main}`}>
              {children}
            </main>
            {showModal && 
              <>
              <div className={`${styles.modalBlackBg} w-full h-full fixed top-0 right-0 z-10`} />
                <div className={`z-20 fixed top-40 rounded-lg ${styles.modal}`}>
                  <div className='relative w-full'>
                    <div className={`${styles.modalHeader} h-12 rounded-lg  px-6 flex`}>
                      <p className={`text-normal font-extrabold isGray ${styles.modalTitle}`}>ایجاد سوال جدید</p>
                      <button 
                        className=""
                        onClick={() => openNewItemModal(false)}>
                        <CloseIcon />
                      </button>
                    </div>
                    <div className={`${styles.modalBody} px-6 py-3`}>
                        <Formik
                          initialValues={initialValues}
                          onSubmit={(values, actions) => {
                            const questionsArray = JSON.parse(localStorage.getItem('questions') || '[]')
                            const newQuestion = {
                              ...values,
                              userId: Math.floor(Math.random() * 340),
                              id: Math.floor(Math.random() * 980),
                              commentCount: 0,
                              time: '۱۳:۴۵',
                              date: '۱۴۰۰/۲/۱۶'
                            }
                            questionsArray.push(newQuestion)
                            localStorage.setItem('questions', JSON.stringify(questionsArray))
                            actions.setSubmitting(false);
                            openNewItemModal(false)
                          }}
                        >
                          <Form>
                            <ModalTextInput
                              label="موضوع"
                              name="title"
                              className={styles.modalInput}
                              placeholder="مشکل در اجرای کد" 
                            />
                             <ModalTextArea
                              label="متن سوال"
                              name="body"
                              className={styles.modalInput}
                              placeholder="مشکل در اجرای کد" 
                              rows="6"
                            />
                            <div className='flex flex-row-reverse mt-5'>
                              <button type="submit" className={`${styles.modalSubmitBtn} pl-5 pr-5 py-1.5`}>ایجاد سوال</button>
                              <button className={`${styles.modalCancelBtn} pl-5 pr-5 py-1.5`} onClick={() => openNewItemModal(false)}>انصراف</button>
                            </div>
                          </Form>
                        </Formik>
                    </div>
                  </div>
                </div>
              </>}
        </div>
    </>
    );
  }

export default Layout